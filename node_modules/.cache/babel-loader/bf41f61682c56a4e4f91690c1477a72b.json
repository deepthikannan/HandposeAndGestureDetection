{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arjun\\\\OneDrive\\\\Desktop\\\\gesture detection\\\\GestureRecognition\\\\src\\\\App.js\";\n// 0. Install fingerpose npm install fingerpose\n// 1. Add Use State\n// 2. Import emojis and finger pose import * as fp from \"fingerpose\";\n// 3. Setup hook and emoji object\n// 4. Update detect function for gesture handling\n// 5. Add emoji display to the screen\n///////// NEW STUFF ADDED USE STATE\nimport React, { useRef, useState, useEffect } from \"react\"; ///////// NEW STUFF ADDED USE STATE\n// import logo from './logo.svg';\n\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\"; ///////// NEW STUFF IMPORTS\n\nimport * as fp from \"fingerpose\";\nimport victory from \"./victory.png\";\nimport thumbs_up from \"./thumbs_up.png\"; ///////// NEW STUFF IMPORTS\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null); ///////// NEW STUFF ADDED STATE HOOK\n\n  const [emoji, setEmoji] = useState(null);\n  const images = {\n    thumbs_up: thumbs_up,\n    victory: victory\n  };\n  const thumbsDownGesture = new fp.GestureDescription('thumbs_down'); ///////// NEW STUFF ADDED STATE HOOK\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\"); //  Loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 10);\n  };\n\n  const detect = async net => {\n    // Check data is available\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // Make Detections\n\n      const hand = await net.estimateHands(video); // console.log(hand);\n      ///////// NEW STUFF ADDED GESTURE HANDLING\n\n      if (hand.length > 0) {\n        const GE = new fp.GestureEstimator([fp.Gestures.VictoryGesture, fp.Gestures.ThumbsUpGesture]);\n        const gesture = await GE.estimate(hand[0].landmarks, 4);\n\n        if (gesture.gestures !== undefined && gesture.gestures.length > 0) {\n          // console.log(gesture.gestures);\n          const confidence = gesture.gestures.map(prediction => prediction.confidence);\n          const maxConfidence = confidence.indexOf(Math.max.apply(null, confidence)); // console.log(gesture.gestures[maxConfidence].name);\n\n          setEmoji(gesture.gestures[maxConfidence].name);\n          console.log(emoji);\n        }\n      } ///////// NEW STUFF ADDED GESTURE HANDLING\n      // Draw mesh\n\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  useEffect(() => {\n    runHandpose();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"Handpose Detection and Gesture recognition\"), /*#__PURE__*/React.createElement(Webcam, {\n    ref: webcamRef,\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zindex: 9,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zindex: 9,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), emoji !== null ? /*#__PURE__*/React.createElement(\"img\", {\n    src: images[emoji],\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 400,\n      bottom: 500,\n      right: 0,\n      textAlign: \"center\",\n      height: 100\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }) : \"\"));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/arjun/OneDrive/Desktop/gesture detection/GestureRecognition/src/App.js"],"names":["React","useRef","useState","useEffect","tf","handpose","Webcam","drawHand","fp","victory","thumbs_up","App","webcamRef","canvasRef","emoji","setEmoji","images","thumbsDownGesture","GestureDescription","runHandpose","net","load","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","length","GE","GestureEstimator","Gestures","VictoryGesture","ThumbsUpGesture","gesture","estimate","landmarks","gestures","undefined","confidence","map","prediction","maxConfidence","indexOf","Math","max","apply","name","ctx","getContext","position","marginLeft","marginRight","left","right","textAlign","zindex","bottom"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD,C,CACA;AAEA;;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,6BAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;;AACA,OAAO,KAAKC,EAAZ,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,SAAP,MAAsB,iBAAtB,C,CACA;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,SAAS,GAAGX,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMY,SAAS,GAAGZ,MAAM,CAAC,IAAD,CAAxB,CAFa,CAIb;;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMc,MAAM,GAAG;AAAEN,IAAAA,SAAS,EAAEA,SAAb;AAAwBD,IAAAA,OAAO,EAAEA;AAAjC,GAAf;AACA,QAAMQ,iBAAiB,GAAG,IAAIT,EAAE,CAACU,kBAAP,CAA0B,aAA1B,CAA1B,CAPa,CAQb;;AAEA,QAAMC,WAAW,GAAG,YAAY;AAC9B,UAAMC,GAAG,GAAG,MAAMf,QAAQ,CAACgB,IAAT,EAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAF8B,CAG9B;;AACAC,IAAAA,WAAW,CAAC,MAAM;AAChBC,MAAAA,MAAM,CAACL,GAAD,CAAN;AACD,KAFU,EAER,EAFQ,CAAX;AAGD,GAPD;;AASA,QAAMK,MAAM,GAAG,MAAOL,GAAP,IAAe;AAC5B;AACA,QACE,OAAOR,SAAS,CAACc,OAAjB,KAA6B,WAA7B,IACAd,SAAS,CAACc,OAAV,KAAsB,IADtB,IAEAd,SAAS,CAACc,OAAV,CAAkBC,KAAlB,CAAwBC,UAAxB,KAAuC,CAHzC,EAIE;AACA;AACA,YAAMD,KAAK,GAAGf,SAAS,CAACc,OAAV,CAAkBC,KAAhC;AACA,YAAME,UAAU,GAAGjB,SAAS,CAACc,OAAV,CAAkBC,KAAlB,CAAwBE,UAA3C;AACA,YAAMC,WAAW,GAAGlB,SAAS,CAACc,OAAV,CAAkBC,KAAlB,CAAwBG,WAA5C,CAJA,CAMA;;AACAlB,MAAAA,SAAS,CAACc,OAAV,CAAkBC,KAAlB,CAAwBI,KAAxB,GAAgCF,UAAhC;AACAjB,MAAAA,SAAS,CAACc,OAAV,CAAkBC,KAAlB,CAAwBK,MAAxB,GAAiCF,WAAjC,CARA,CAUA;;AACAjB,MAAAA,SAAS,CAACa,OAAV,CAAkBK,KAAlB,GAA0BF,UAA1B;AACAhB,MAAAA,SAAS,CAACa,OAAV,CAAkBM,MAAlB,GAA2BF,WAA3B,CAZA,CAcA;;AACA,YAAMG,IAAI,GAAG,MAAMb,GAAG,CAACc,aAAJ,CAAkBP,KAAlB,CAAnB,CAfA,CAgBA;AAEA;;AAEA,UAAIM,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,cAAMC,EAAE,GAAG,IAAI5B,EAAE,CAAC6B,gBAAP,CAAwB,CACjC7B,EAAE,CAAC8B,QAAH,CAAYC,cADqB,EAEjC/B,EAAE,CAAC8B,QAAH,CAAYE,eAFqB,CAAxB,CAAX;AAOA,cAAMC,OAAO,GAAG,MAAML,EAAE,CAACM,QAAH,CAAYT,IAAI,CAAC,CAAD,CAAJ,CAAQU,SAApB,EAA+B,CAA/B,CAAtB;;AACA,YAAIF,OAAO,CAACG,QAAR,KAAqBC,SAArB,IAAkCJ,OAAO,CAACG,QAAR,CAAiBT,MAAjB,GAA0B,CAAhE,EAAmE;AACjE;AAEA,gBAAMW,UAAU,GAAGL,OAAO,CAACG,QAAR,CAAiBG,GAAjB,CAChBC,UAAD,IAAgBA,UAAU,CAACF,UADV,CAAnB;AAGA,gBAAMG,aAAa,GAAGH,UAAU,CAACI,OAAX,CACpBC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBP,UAArB,CADoB,CAAtB,CANiE,CASjE;;AACA/B,UAAAA,QAAQ,CAAC0B,OAAO,CAACG,QAAR,CAAiBK,aAAjB,EAAgCK,IAAjC,CAAR;AACAhC,UAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACD;AACF,OA1CD,CA4CA;AAEA;;;AACA,YAAMyC,GAAG,GAAG1C,SAAS,CAACa,OAAV,CAAkB8B,UAAlB,CAA6B,IAA7B,CAAZ;AACAjD,MAAAA,QAAQ,CAAC0B,IAAD,EAAOsB,GAAP,CAAR;AACD;AACF,GAxDD;;AA0DApD,EAAAA,SAAS,CAAC,MAAI;AAACgB,IAAAA,WAAW;AAAG,GAApB,EAAqB,EAArB,CAAT;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDADF,eAIE,oBAAC,MAAD;AACE,IAAA,GAAG,EAAEP,SADP;AAEE,IAAA,KAAK,EAAE;AACL6C,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,UAAU,EAAE,MAFP;AAGLC,MAAAA,WAAW,EAAE,MAHR;AAILC,MAAAA,IAAI,EAAE,CAJD;AAKLC,MAAAA,KAAK,EAAE,CALF;AAMLC,MAAAA,SAAS,EAAE,QANN;AAOLC,MAAAA,MAAM,EAAE,CAPH;AAQLhC,MAAAA,KAAK,EAAE,GARF;AASLC,MAAAA,MAAM,EAAE;AATH,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAmBE;AACE,IAAA,GAAG,EAAEnB,SADP;AAEE,IAAA,KAAK,EAAE;AACL4C,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,UAAU,EAAE,MAFP;AAGLC,MAAAA,WAAW,EAAE,MAHR;AAILC,MAAAA,IAAI,EAAE,CAJD;AAKLC,MAAAA,KAAK,EAAE,CALF;AAMLC,MAAAA,SAAS,EAAE,QANN;AAOLC,MAAAA,MAAM,EAAE,CAPH;AAQLhC,MAAAA,KAAK,EAAE,GARF;AASLC,MAAAA,MAAM,EAAE;AATH,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,EAkCGlB,KAAK,KAAK,IAAV,gBACC;AACE,IAAA,GAAG,EAAEE,MAAM,CAACF,KAAD,CADb;AAEE,IAAA,KAAK,EAAE;AACL2C,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,UAAU,EAAE,MAFP;AAGLC,MAAAA,WAAW,EAAE,MAHR;AAILC,MAAAA,IAAI,EAAE,GAJD;AAKLI,MAAAA,MAAM,EAAE,GALH;AAMLH,MAAAA,KAAK,EAAE,CANF;AAOLC,MAAAA,SAAS,EAAE,QAPN;AAQL9B,MAAAA,MAAM,EAAE;AARH,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAeC,EAjDJ,CADF,CADF;AA2DD;;AAED,eAAerB,GAAf","sourcesContent":["// 0. Install fingerpose npm install fingerpose\r\n// 1. Add Use State\r\n// 2. Import emojis and finger pose import * as fp from \"fingerpose\";\r\n// 3. Setup hook and emoji object\r\n// 4. Update detect function for gesture handling\r\n// 5. Add emoji display to the screen\r\n\r\n///////// NEW STUFF ADDED USE STATE\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\n///////// NEW STUFF ADDED USE STATE\r\n\r\n// import logo from './logo.svg';\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport * as handpose from \"@tensorflow-models/handpose\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { drawHand } from \"./utilities\";\r\n\r\n///////// NEW STUFF IMPORTS\r\nimport * as fp from \"fingerpose\";\r\nimport victory from \"./victory.png\";\r\nimport thumbs_up from \"./thumbs_up.png\";\r\n///////// NEW STUFF IMPORTS\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  ///////// NEW STUFF ADDED STATE HOOK\r\n  const [emoji, setEmoji] = useState(null);\r\n  const images = { thumbs_up: thumbs_up, victory: victory };\r\n  const thumbsDownGesture = new fp.GestureDescription('thumbs_down');\r\n  ///////// NEW STUFF ADDED STATE HOOK\r\n\r\n  const runHandpose = async () => {\r\n    const net = await handpose.load();\r\n    console.log(\"Handpose model loaded.\");\r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // Make Detections\r\n      const hand = await net.estimateHands(video);\r\n      // console.log(hand);\r\n\r\n      ///////// NEW STUFF ADDED GESTURE HANDLING\r\n\r\n      if (hand.length > 0) {\r\n        const GE = new fp.GestureEstimator([\r\n          fp.Gestures.VictoryGesture,\r\n          fp.Gestures.ThumbsUpGesture,\r\n          \r\n\r\n          \r\n        ]);\r\n        const gesture = await GE.estimate(hand[0].landmarks, 4);\r\n        if (gesture.gestures !== undefined && gesture.gestures.length > 0) {\r\n          // console.log(gesture.gestures);\r\n\r\n          const confidence = gesture.gestures.map(\r\n            (prediction) => prediction.confidence\r\n          );\r\n          const maxConfidence = confidence.indexOf(\r\n            Math.max.apply(null, confidence)\r\n          );\r\n          // console.log(gesture.gestures[maxConfidence].name);\r\n          setEmoji(gesture.gestures[maxConfidence].name);\r\n          console.log(emoji);\r\n        }\r\n      }\r\n\r\n      ///////// NEW STUFF ADDED GESTURE HANDLING\r\n\r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      drawHand(hand, ctx);\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runHandpose()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Handpose Detection and\r\n          Gesture recognition\r\n        </h1>\r\n        <Webcam\r\n          ref={webcamRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n        {/* NEW STUFF */}\r\n        {emoji !== null ? (\r\n          <img\r\n            src={images[emoji]}\r\n            style={{\r\n              position: \"absolute\",\r\n              marginLeft: \"auto\",\r\n              marginRight: \"auto\",\r\n              left: 400,\r\n              bottom: 500,\r\n              right: 0,\r\n              textAlign: \"center\",\r\n              height: 100,\r\n            }}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        {/* NEW STUFF */}\r\n      </header>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}